 namespace mongo {
 
     ClientInfo::ClientInfo(AbstractMessagingPort* messagingPort) : ClientBasic(messagingPort) {
         _cur = &_a;
         _prev = &_b;
         _autoSplitOk = true;
         if (messagingPort) {
             _remote = messagingPort->remote();
         }
     }
 
     ClientInfo::~ClientInfo() {
     }
 
     void ClientInfo::addShard( const string& shard ) {
         _cur->insert( shard );
         _sinceLastGetError.insert( shard );
     }
 
     void ClientInfo::newPeerRequest( const HostAndPort& peer ) {
         if ( ! _remote.hasPort() )
             _remote = peer;
         else if ( _remote != peer ) {
             stringstream ss;
             ss << "remotes don't match old [" << _remote.toString() << "] new [" << peer.toString() << "]";
             throw UserException( 13134 , ss.str() );
         }
 
         newRequest();
     }
 
     void ClientInfo::newRequest() {
         _lastAccess = (int) time(0);
 
         set<string> * temp = _cur;
         _cur = _prev;
         _prev = temp;
         _cur->clear();
-        getAuthorizationManager()->startRequest();
+        getAuthorizationSession()->startRequest();
     }
 
     ClientInfo* ClientInfo::create(AbstractMessagingPort* messagingPort) {
         ClientInfo * info = _tlInfo.get();
         massert(16472, "A ClientInfo already exists for this thread", !info);
         info = new ClientInfo(messagingPort);
-        info->setAuthorizationManager(new AuthorizationManager(new AuthExternalStateMongos()));
+        info->setAuthorizationSession(new AuthorizationSession(new AuthExternalStateMongos()));
         _tlInfo.reset( info );
         info->newRequest();
         return info;
     }
 
}