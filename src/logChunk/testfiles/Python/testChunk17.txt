 def process_yaml_error(exc, data, path=None, show_content=True):
     if hasattr(exc, 'problem_mark'):
         mark = exc.problem_mark
         if show_content:
             if mark.line -1 >= 0:
                 before_probline = data.split("\n")[mark.line-1]
             else:
                 before_probline = ''
             probline = data.split("\n")[mark.line]
             arrow = " " * mark.column + "^"
             msg = """Syntax Error while loading YAML script, %s
 Note: The error may actually appear before this position: line %s, column %s
 
 %s
 %s
 %s""" % (path, mark.line + 1, mark.column + 1, before_probline, probline, arrow)
 
             unquoted_var = None
             if '{{' in probline and '}}' in probline:
                 if '"{{' not in probline or "'{{" not in probline:
                     unquoted_var = True
 
             if not unquoted_var:
                 msg = process_common_errors(msg, probline, mark.column)
             else:
                 msg = msg + """
 We could be wrong, but this one looks like it might be an issue with
 missing quotes.  Always quote template expression brackets when they
 start a value. For instance:
 
     with_items:
       - {{ foo }}
 
 Should be written as:
 
     with_items:
       - "{{ foo }}"
 
 """
         else:
             # most likely displaying a file with sensitive content,
             # so don't show any of the actual lines of yaml just the
             # line number itself
             msg = """Syntax error while loading YAML script, %s
 The error appears to have been on line %s, column %s, but may actually
 be before there depending on the exact syntax problem.
 """ % (path, mark.line + 1, mark.column + 1)
 
     else:
         # No problem markers means we have to throw a generic
         # "stuff messed up" type message. Sry bud.
         if path:
             msg = "Could not parse YAML. Check over %s again." % path
         else:
             msg = "Could not parse YAML."
     raise errors.AnsibleYAMLValidationFailed(msg)
 
 def _validate_both_dicts(a, b):
 
     if not (isinstance(a, dict) and isinstance(b, dict)):
         raise errors.AnsibleError(
             "failed to combine variables, expected dicts but got a '%s' and a '%s'" % (type(a).__name__, type(b).__name__)
         )
 
-def serialize_args(args):
-    ''' convert a dict to a string of key/value items '''
-    return ' '.join("%s='%s'" % item for item in args.iteritems())
-
 def merge_hash(a, b):
     ''' recursively merges hash b into a
     keys from b take precedence over keys from a '''
 
     result = {}
 
     # we check here as well as in combine_vars() since this
     # function can work recursively with nested dicts
     _validate_both_dicts(a, b)
 
     for dicts in a, b:
         # next, iterate over b keys and values
         for k, v in dicts.iteritems():
             # if there's already such key in a
             # and that key contains dict
             if k in result and isinstance(result[k], dict):
                 # merge those dicts recursively
                 result[k] = merge_hash(a[k], v)
             else:
                 # otherwise, just copy a value from b to a
                 result[k] = v
 
     return result
