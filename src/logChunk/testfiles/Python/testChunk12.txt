 class TaskExecutor:
 
     def _get_loop_items(self):
         '''
         Loads a lookup plugin to handle the with_* portion of a task (if specified),
         and returns the items result.
         '''
 
         # save the play context variables to a temporary dictionary,
         # so that we can modify the job vars without doing a full copy
         # and later restore them to avoid modifying things too early
         play_context_vars = dict()
         self._play_context.update_vars(play_context_vars)
 
         old_vars = dict()
         for k in play_context_vars.keys():
             if k in self._job_vars:
                 old_vars[k] = self._job_vars[k]
             self._job_vars[k] = play_context_vars[k]
 
         templar = Templar(loader=self._loader, shared_loader_obj=self._shared_loader_obj, variables=self._job_vars)
         items = None
         if self._task.loop:
             if self._task.loop in self._shared_loader_obj.lookup_loader:
                 #TODO: remove convert_bare true and deprecate this in with_
                 if self._task.loop == 'first_found':
                     # first_found loops are special.  If the item is undefined
                     # then we want to fall through to the next value rather
                     # than failing.
                     loop_terms = listify_lookup_plugin_terms(terms=self._task.loop_args, templar=templar, loader=self._loader, fail_on_undefined=False, convert_bare=True)
                     loop_terms = [t for t in loop_terms if not templar._contains_vars(t)]
                 else:
                     try:
                         loop_terms = listify_lookup_plugin_terms(terms=self._task.loop_args, templar=templar, loader=self._loader, fail_on_undefined=True, convert_bare=True)
                     except AnsibleUndefinedVariable as e:
-                        loop_terms = []
                         display.deprecated("Skipping task due to undefined Error, in the future this will be a fatal error.: %s" % to_bytes(e))
+                        return None
                 items = self._shared_loader_obj.lookup_loader.get(self._task.loop, loader=self._loader, templar=templar).run(terms=loop_terms, variables=self._job_vars, wantlist=True)
             else:
                 raise AnsibleError("Unexpected failure in finding the lookup named '%s' in the available lookup plugins" % self._task.loop)
 
         # now we restore any old job variables that may have been modified,
         # and delete them if they were in the play context vars but not in
         # the old variables dictionary
         for k in play_context_vars.keys():
             if k in old_vars:
                 self._job_vars[k] = old_vars[k]
             else:
                 del self._job_vars[k]
 
         if items:
             from ansible.vars.unsafe_proxy import UnsafeProxy
             for idx, item in enumerate(items):
                 if item is not None and not isinstance(item, UnsafeProxy):
                     items[idx] = UnsafeProxy(item)
         return items
